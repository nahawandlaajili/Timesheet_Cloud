# Prometheus
https://prometheus.io/docs/prometheus/latest/getting_started/
# Install Prometheus using Helm:
# ```bash
# helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
# helm repo update
# helm install prometheus prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace
# ```
# Access Prometheus:
# ```bash
# kubectl port-forward -n monitoring service/prometheus-operated 9090:9090
# ```
# Open your browser and go to `http://localhost:9090`
# Default credentials:
# - Username: `admin`
# - Password: `prom-operator`
# Add Prometheus as a data source in Grafana:
# ```bash
# kubectl port-forward -n monitoring service/prometheus-operated 9090:9090
# ```
# Open Grafana in your browser and go to `Configuration` > `Data Sources`
# - Click `Add data source`
# - Select `Prometheus`
# - Set the URL to `http://prometheus-operated.monitoring.svc.cluster.local:9090`
# - Click `Save & Test`
# - You can now visualize metrics from your Kubernetes cluster and applications in Grafana
# - Create custom dashboards as needed
# - For more information on Prometheus, refer to the [Prometheus documentation](https://prometheus.io/docs/introduction/overview/)
# Prometheus and Grafana
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install prometheus prometheus-community/kube-prometheus-stack \
  --namespace monitoring

# --create-namespace
# --version 45.0.0
# --set grafana.enabled=true \
# --set prometheusOperator.enabled=true \
# --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
# --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false \
# --set prometheus.prometheusSpec.ruleSelectorNilUsesHelmValues=false \
# --set prometheus.prometheusSpec.alertingEndpoints[0].name=alertmanager-main \
# --set prometheus.prometheusSpec.alertingEndpoints[0].namespace=monitoring \
# --set prometheus.prometheusSpec.alertingEndpoints[0].port=web \
# --set prometheus.prometheusSpec.alertingEndpoints[0].scheme=http \
# --set prometheus.prometheusSpec.alertingEndpoints[0].path=/api/v1/alerts
# --set prometheus.prometheusSpec.serviceMonitorSelector.matchExpressions[0].key=k8s-app \
  Check its status by running:
  kubectl --namespace monitoring get pods -l "release=prometheus"




  Get Grafana 'admin' user password by running:

  kubectl --namespace monitoring get secrets prometheus-grafana -o jsonpath="{.data.admin-password}" | base64 -d ; echo

Access Grafana local instance:

  export POD_NAME=$(kubectl --namespace monitoring get pod -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=prometheus" -oname)
  kubectl --namespace monitoring port-forward $POD_NAME 3000

Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create & configure Alertmanager and Prometheus instances using the Operator.
# Grafana
# - Install Grafana using Helm:
#   ```bash
#   helm repo add grafana https://grafana.github.io/helm-charts
#   helm repo update
#   helm install grafana grafana/grafana --namespace monitoring --create-namespace
#   ```
# - Access Grafana:
#   ```bash
#   kubectl port-forward service/grafana 3000:80 -n monitoring
#   ```
# - Open your browser and go to `http://localhost:3000`
# - Default credentials:
#   - Username: `admin`
#   - Password: `prom-operator`
# - Add Prometheus as a data source in Grafana:
#   - Go to `Configuration` > `Data Sources`
#   - Click `Add data source`
#   - Select `Prometheus`
#   - Set the URL to `http://prometheus-server.monitoring.svc.cluster.local`
#   - Click `Save & Test`
# - Import dashboards:
#   - Go to `Create` > `Import`
#   - Use the dashboard IDs from the Prometheus documentation or Grafana community dashboards
#   - For example, you can use the ID `1860` for a Kubernetes cluster monitoring dashboard
#   - Click `Load`, then `Import`
# - You can now visualize metrics from your Kubernetes cluster and applications in Grafana
# - Create custom dashboards as needed
# - For more information on Grafana, refer to the [Grafana documentation](https://grafana.com/docs/grafana/latest/)

https://medium.com/@anassmerai26/exposing-grafana-in-a-kubernetes-cluster-for-kubernetes-metrics-monitoring-33a88f23b45e




----
kubectl port-forward -n monitoring service/prometheus-operated 9090:9090
http://127.0.0.1:9090/query

kubectl port-forward -n monitoring deployment/prometheus-grafana --address 0.0.0.0 3000:3000

http://192.168.178.48:3000/admin
http://grafana.timesheet.com:3000/?orgId=1&from=now-6h&to=now&timezone=browser
