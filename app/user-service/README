User-profile-service
This service manages employees & authentication. It now supports JWT-based login/signup.

## 1. Backend Project Folder Structure 

user-service/
├── src/
│   └── main/
│       ├── java/
│       │   └── com/cloud/userservice/
│       │       ├── config/
│       │       │   ├── WebConfig.java
│       │       │   └── SecurityConfig.java
│       │       ├── controller/
│       │       │   ├── AuthController.java
│       │       │   └── UserProfileController.java
│       │       ├── dto/
│       │       │   ├── LoginRequest.java
│       │       │   ├── RegisterRequest.java
│       │       │   ├── AuthResponses.java
│       │       │   └── UserProfileDto.java
│       │       ├── exception/
│       │       │   ├── UserNotFoundException.java
│       │       │   └── GlobalExceptionHandler.java
│       │       ├── model/
│       │       │   └── UserProfile.java
│       │       ├── repository/
│       │       │   └── UserProfileRepository.java
│       │       ├── security/
│       │       │   ├── CustomUserDetailsService.java
│       │       │   ├── JwtAuthenticationFilter.java
│       │       │   └── JwtUtil.java
│       │       ├── service/
│       │       │   ├── AuthService.java
│       │       │   └── UserProfileService.java
│       │       └── UserServiceApplication.java
│       └── resources/
│           └── application.yml
├── pom.xml
└── target/




## Frontend Project Folder Structure
timesheet-frontend
    ├── node_modules/
    ├── public/
    └── src
        ├── App.css
        ├── App.js
        ├── index.css
        └── index.js
        └── login.js
    ├── package-lock.json
    ├── package.json
    ├── README.md


------------------------------------------------------------------------------------------
2. Postgres DB
psql postgres 
## Create database
CREATE DATABASE userdb;

## Create user with password and Give privileges

CREATE USER root WITH PASSWORD 'grgjUHI9';
GRANT ALL PRIVILEGES ON DATABASE dashboard_app TO root

## check all users 
\du

## list tables
\dt           

## describe columns of the 'users' table
\d users       

## see all data
SELECT * FROM users;  

## exit
\q

------------------------------------------------------------------------------------------
# build project
mvn clean package

# run project
mvn spring-boot:run
or java -jar target/user-service.jar


# JWT configuration (application.yml)
security:
  jwt:
    secret: <base64-encoded 256-bit secret>
    expiration-ms: 3600000

# test APIs
## signup
curl -X POST http://localhost:8080/auth/signup \
  -H 'Content-Type: application/json' \
  -d '{"name":"Alice","email":"alice@example.com","password":"pass123"}'

## login (receives JWT token)
curl -X POST http://localhost:8080/auth/login \
  -H 'Content-Type: application/json' \
  -d '{"email":"alice@example.com","password":"pass123"}'

## call protected endpoint
TOKEN=$(curl -s -X POST http://localhost:8080/auth/login -H 'Content-Type: application/json' -d '{"email":"alice@example.com","password":"pass123"}' | jq -r .token)
curl http://localhost:8080/api/user-profiles -H "Authorization: Bearer $TOKEN"
-------------
Run postgres
docker run --name userdb -e POSTGRES_USER=user_service -e POSTGRES_PASSWORD=grgjUHI -e POSTGRES_DB=userdb -p 5432:5432 -d postgres:15

-----------------
## urls
http://localhost:8080/api/user-profiles
http://localhost:8080/actuator/health
http://localhost:8080/auth/login

-----------------------------------------------------------------------------------------------------------
CORS is set up so your React frontend can make requests.

Errors are handled centrally with GlobalExceptionHandler.

DTOs separate API payloads from your JPA entities.